openapi: 3.0.0
info:
  version: 1.4.59
  title: Sockfish
  description: Sockfish
externalDocs:
  description: Github documentation
  url: https://github.com/10f7c7/sockfish-api
servers:
  - url: https://api.10f7c7.dev:3000/api/v1
paths:
  /users/{userId}:
    parameters:
      - name: userId
        description: The unique identifier of the user
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UserId"
    get:
      summary: read a user object
      security:
        - ApiKey: []
      operationId: getUserById
      tags:
        - users
      responses:
        "200":
          description: The user corresponding to the provided `userId`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad data provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: No authorization provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Action unauthorized for provided user authentication
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Unexpected server side error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{userId}/hall_passes:
    parameters:
      - name: userId
        description: The unique identifier of the user
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UserId"
    get:
      summary: read a user hall passes
      security:
        - ApiKey: []
      operationId: getUserPassesById
      tags:
        - users
      responses:
        "200":
          description: A list of hall passes for the provided `userId`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HallPasses"
        "400":
          description: Bad data provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: No authorization provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Action unauthorized for provided user authentication
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Unexpected server side error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: creates a new hall pass
      security:
        - ApiKey: []
      operationId: setUserPassesById
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/HallPassItem"
              required:
                - action
              properties:
                action:
                  type: string
                  enum:
                    - startPass
                    - endPass
      responses:
        "200":
          description: Creates a hall pass for the provided `userId`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HallPasses"
        "400":
          description: Bad data provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: No authorization provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Action unauthorized for provided user authentication
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Unexpected server side error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{userId}/current_course:
    parameters:
      - name: userId
        description: The unique identifier of the user
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UserId"
    get:
      summary: returns students current class
      security:
        - ApiKey: []
      tags:
        - users
      responses:
        "200":
          description: Returns the current course for the provided `userId`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Course"
        "400":
          description: Bad data provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: No authorization provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Action unauthorized for provided user authentication
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Unexpected server side error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /crisis/get_crises:
    parameters:
      - name: getResolved
        description: Get only resolved crises
        in: query
        schema:
          properties:
            status:
              type: boolean
              default: false
      - name: getAll
        description: Get all crises
        in: query
        schema:
          properties:
            status:
              type: boolean
              default: false
    get:
      summary: gets all global crises
      operationId: getAllCrises
      tags:
        - crisis
      responses:
        "200":
          description: Returns the current or resolved crises for all users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Crisis"
        "400":
          description: Bad data provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Unexpected server side error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /crisis/get_crises/users/{userId}:
    parameters:
      - name: userId
        description: The unique identifier of the user
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UserId"
      - name: getResolved
        description: Get only resolved crises
        in: query
        schema:
          properties:
            status:
              type: boolean
              default: false
      - name: getAll
        description: Get all crises
        in: query
        schema:
          properties:
            status:
              type: boolean
              default: false
    get:
      summary: gets all user crises
      operationId: getAllCrisesById
      tags:
        - crisis
      responses:
        "200":
          description: Returns the current or resolved crises for the provided `userId`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Crisis"
        "400":
          description: Bad data provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Unexpected server side error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /crisis/create_crisis:
    post:
      summary: creates a crisis entry
      operationId: createCrisis
      tags:
        - crisis
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/CrisisItem"
              required:
                - action
              properties:
                action:
                  type: string
                  enum:
                    - startCrisis
                    - endCrisis
      responses:
        "200":
          description: Creates a crisis for the provided `userId`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CrisisItem"
        "400":
          description: Bad data provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Unexpected server side error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /counselor/create_appointment:
    post:
      summary: creates an appointment
      security:
        - ApiKey: []
      operationId: createAppointment
      tags:
        - counselor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Appointment"
      responses:
        "200":
          description: Creates an appointment with the provided `counselorId` for the provided `userId`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Appointment"
        "400":
          description: Bad data provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: No authorization provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Action unauthorized for provided user authentication
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Unexpected server side error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /counselor/get_occupied:
    get:
      parameters:
        - name: date
          description: Get crises by specified date
          in: query
          schema:
            properties:
              status:
                type: string
                format: date
                default: false
        - name: timesOnly
          description: Get time ranges only
          in: query
          schema:
            properties:
              status:
                type: boolean
                default: false
        - name: counselorId
          description: Get by specified counselorId
          in: query
          schema:
            properties:
              status:
                type: integer
                default: false
      summary: gets occupied counselors
      operationId: getOccupied
      tags:
        - counselor
      responses:
        "200":
          description: Gets all occupied appointment slots
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/Appointment"
        "400":
          description: Bad data provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Unexpected server side error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /counselor/get_counselor:
    get:
      parameters:
        - name: isAvailable
          description: Get only available counselors
          in: query
          schema:
            properties:
              status:
                type: boolean
                default: false
      summary: gets all counselors
      operationId: getCounselors
      tags:
        - counselor
      responses:
        "200":
          description: Returns a list of all counselors and their attributes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Counselor"
        "400":
          description: Bad data provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Unexpected server side error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /counselor/get_counselor/{counselorId}:
    get:
      parameters:
        - name: counselorId
          description: Get counselor by specified counselorId
          in: path
          required: true
          schema:
            type: integer
        - name: isAvailable
          description: Get only available counselors
          in: query
          schema:
            properties:
              status:
                type: boolean
                default: false
      summary: get counselor by Id
      operationId: getCounselorById
      tags:
        - counselor
      responses:
        "200":
          description: The counselor corresponding to the provided `counselorId`
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Counselor"
        "400":
          description: Bad data provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Unexpected server side error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /counselor/toggle_walkin:
    post:
      summary: gets all counselors
      security:
        - ApiKey: []
      operationId: toggleWalkin
      tags:
        - counselor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - action
                - counselorId
                - userId
              properties:
                action:
                  type: string
                  enum:
                    - startWalkin
                    - endWalkin
                counselorId:
                  type: integer
                  example: 1
                userId:
                  type: integer
                  example: 1
      responses:
        "200":
          description: Creates a walkin appointment with the provided `counselorId` for the provided `userId`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Counselor"
        "400":
          description: Bad data provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: No authorization provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Action unauthorized for provided user authentication
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Unexpected server side error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /statistics/urgency:
    get:
      summary: gets a graph of crises urgency
      operationId: statisticsUrgancy
      tags:
        - statistics
      responses:
        "200":
          description: Returns a frequency graph of crises urgency
          content:
            image/svg:
              schema:
                type: string
                format: binary
                example: "svg photo"
        "400":
          description: Bad data provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Unexpected server side error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /statistics/appointment:
    get:
      summary: gets a graph of appointment info
      operationId: statisticsAppointment
      tags:
        - statistics
      responses:
        "200":
          description: Returns a frequency graph of appointment
          content:
            image/svg:
              schema:
                type: string
                format: binary
                example: "svg photo"
        "400":
          description: Bad data provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Unexpected server side error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/login:
    post:
      summary: creates a new authentication token
      operationId: createAuthToken
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
      responses:
        "200":
          description: Generates an authentication token for the provided `userId`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserToken"
        "400":
          description: Bad data provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Unexpected server side error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/signup:
    post:
      summary: creates a new user
      operationId: createUser
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
      responses:
        "200":
          description: Successfully created a new user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Bad data provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Unexpected server side error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    UserId:
      description: The unique identifier of the user
      type: integer
      example: 1
    Course:
      type: object
      description: the names and locations of classes
      required:
        - courseName
        - courseRoom
        - courseTeacher
      properties:
        courseName:
          type: string
          example: AP Biology
        courseRoom:
          type: string
          example: 137
        courseTeacher:
          type: string
          example: Mr. Cliford
    HallPasses:
      type: array
      description: list of user hall passes
      items:
        $ref: "#/components/schemas/HallPassItem"
    HallPassItem:
      type: object
      description: the times and type of hall passes
      required:
        - type
        - exitTime
        - originRoom
      properties:
        type:
          type: string
          enum:
            - Bathroom
            - Hall
            - Health Room
            - Water
            - Front Office
            - Media Center
            - Student Services
            - Other
        exitTime:
          type: string
          format: date-time
          readOnly: true
        returnTime:
          type: string
          format: date-time
          readOnly: true
        originRoom:
          type: integer
          example: 137
    User:
      type: object
      required:
        - id
        - name
        - attributes
        - hallPassTimes
        - information
        - appointments
      properties:
        id:
          $ref: "#/components/schemas/UserId"
        name:
          type: string
          example: "Anjay Singla"
        attributes:
          type: object
          required:
            - hasHallPass
            - isInCrisis
          properties:
            hasHallPass:
              type: boolean
            isInCrisis:
              type: boolean
        hallPassTimes:
          $ref: "#/components/schemas/HallPasses"
        information:
          type: object
          required:
            - graduationYear
            - courses
          properties:
            graduationYear:
              type: string
              example: "2026"
            courses:
              type: array
              items:
                $ref: "#/components/schemas/Course"
    UserLogin:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: sock
        password:
          type: string
          example: fishes
    UserToken:
      type: object
      required:
        - id
        - username
        - authToken
      properties:
        id:
          type: integer
          example: "1"
        username:
          type: string
          example: "sock"
        authToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjc4ODIzODYwLCJleHAiOjE2Nzg5MTAyNjB9.t0yDlPgpM22RpMd5RZpNcZKBY3yw0SEG4Gib76hZ8GE"
    Crisis:
      type: array
      description: list of crises
      items:
        allOf:
          - $ref: "#/components/schemas/CrisisItem"
    CrisisItem:
      type: object
      required:
        - location
        - gps
        - description
        - needs
        - urgency
        - userId
        - crisisId
      properties:
        resolved:
          type: boolean
          readOnly: true
        location:
          type: string
          example: "school"
        gps:
          type: string
          example: "NoGPSData"
        description:
          type: string
          example: "this guy, he needs help"
        needs:
          type: string
          example: "human interaction"
        urgency:
          type: integer
          example: 10
        userId:
          $ref: "#/components/schemas/UserId"
        crisisId:
          type: integer
          readOnly: true
          example: 420
    Appointment:
      type: object
      required:
        - counselorId
        - startTime
        - date
        - reason
        - userId
      properties:
        counselorId:
          type: integer
          example: 1
        startTime:
          type: string
          format: full-time
          example: "10:20:00"
        endTime:
          type: string
          format: full-time
          example: "10:30:00"
          nullable: true
        date:
          type: string
          format: date
        reason:
          type: string
          writeOnly: true
          example: "Anxiety"
        userId:
          allOf:
            - $ref: "#/components/schemas/UserId"
          writeOnly: true
    Counselor:
      type: object
      required:
        - counselorId
        - name
        - available
        - walkInAvailable
      properties:
        counselorId:
          type: integer
          example: 1
        name:
          type: string
          example: Ives
        available:
          type: boolean
        walkInAvailable:
          type: boolean
    Error:
      type: object
      required:
        - message
      properties:
        message:
          description: A human readable error message
          type: string
  securitySchemes:
    ApiKey:
      type: apiKey
      in: header
      name: x-access-token
